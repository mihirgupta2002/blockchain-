

//SPDX-License-Identifier: GPL-3.0
 
pragma solidity >=0.5.0 <0.9.0;
// ----------------------------------------------------------------------------
// EIP-20: ERC-20 Token Standard
// https://eips.ethereum.org/EIPS/eip-20
// -----------------------------------------
 
interface ERC20Interface {
    function totalSupply() external view returns (uint);
    function balanceOf(address tokenOwner) external view returns (uint balance);
    function transfer(address to, uint tokens) external returns (bool success);
    
   function allowance(address tokenOwner, address spender) external view returns (uint remaining);
    function approve(address spender, uint tokens) external returns (bool success);
   function transferFrom(address from, address to, uint tokens) external returns (bool success);
    
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
}

contract MihirGupta is ERC20Interface{
    string public name="MihirGupta";
    string public symbol="MG";
    uint decimals=10;
    uint public  override totalSupply;
    mapping(address=>uint) public balances;

    address public founder;
    constructor(){
        founder= msg.sender;
        totalSupply=1000000;//1 lakh
        balances[founder]= totalSupply;

    }

    function balanceOf(address tokenOwner) public override view returns(uint balance)
    {
        return balances[tokenOwner];
        

    }
    function transfer(address to, uint tokens) public  returns (bool success){
        
            require(balances[msg.sender]>=tokens);
            balances[msg.sender]-=tokens;
            balances[to]+=tokens;

            emit Transfer(msg.sender, to, tokens);

            return true;

    }


    mapping(address =>mapping(address=>uint)) public allowed;

    function allowance(address tokenOwner, address spender) public override view returns (uint remaining){
        return allowed[tokenOwner][spender];

    }
    function approve(address spender, uint tokens) public override returns (bool success){
        require(balances[msg.sender]>=tokens);
        allowed[msg.sender][spender]=tokens;
        emit Approval(msg.sender,spender, tokens);

        return true;



    }
    function transferFrom(address from, address to, uint tokens) public override returns (bool success){
       require( allowed[from][to]>=tokens);
       require(balances[from]>=tokens);
       balances[to]+=tokens;
       balances[from]-=tokens;
       allowed[from][to]-=tokens;
       emit Transfer(from,to,tokens);

       return true;

     }

}
